package com.cos.product;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/mystore") // This means URL's start with /mystore (after Application path)
public class ProductController {
  @Autowired // This means to get the bean called productRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private ProductRepository productRepository;

  @PostMapping(path="/product") // Map ONLY POST Requests
  public @ResponseBody String addNewProduct (@RequestBody Product p) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

//    Product p = new Product();
//    p.setProductName(productName);
//    p.setBrand(brand);
//    p.setPrice(price);
    productRepository.save(p);
    return "Saved Successully";
  }

  @GetMapping(path="/products", produces = "application/json")
  public @ResponseBody Iterable<Product> getAllProducts() {
    // This returns a JSON or XML with the product
	  Iterable<Product> lst =  productRepository.findAll();
    return lst;
  }
  @GetMapping(path="/product", produces = "application/json")
  public @ResponseBody Product getProduct(@RequestParam(name = "id") Integer id) {
    // This returns a JSON or XML with the product
	  Optional <Product> p =  productRepository.findById(id);
	  if(p.isPresent())
		  return p.get();
	  else
		  return null;
	 
  }
}